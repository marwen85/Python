# -*- coding: utf-8 -*-
"""project 2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oK4Xvzirapex6Fw0GefPGNP5gPiig3dY
"""

import matplotlib.pyplot as plt

import seaborn as sns
import pandas as pd
import pandas_datareader.data as web
from pandas.plotting import scatter_matrix
from mpl_finance import candlestick_ohlc
import datetime
import numpy as np

from urllib.request import urlopen, Request
from bs4 import BeautifulSoup
from nltk.sentiment.vader import SentimentIntensityAnalyzer

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score

!pip install mpl_finance

import nltk
nltk.download('vader_lexicon')

finviz_url = 'https://finviz.com/quote.ashx?t='
tickers = ['AMZN', 'BABA', 'JMIA','PFE', 'JNJ', 'PG']

news_tables = {}
for ticker in tickers:
  url = finviz_url + ticker

  req = Request(url= url, headers= {'user-agent': 'my-app'})
  response = urlopen(req)
  print(response)
  html = BeautifulSoup(response, 'html')

  news_table = html.find(id= 'news-table')
  news_tables[ticker] = news_table

print(news_tables)

parsed_data = []
for ticker, news_table in news_tables.items():
  for row in news_table.findAll('tr'):
    title = row.a.text
    date = row.td.text.split(' ')
    if len(date) == 1:
      time = date[0]
    else:
      dates = date[0]
      time = date[1]
    parsed_data.append([ticker, dates, time, title])
print(parsed_data)

df =pd.DataFrame (parsed_data, columns=['ticker', 'dates', 'time', 'title'])
df

vader = SentimentIntensityAnalyzer()
f = lambda title: vader.polarity_scores(title) ['compound']
df['compound'] = df['title'].apply(f)
df

df['dates'] = pd.to_datetime(df.dates).dt.date

df = df.groupby(['ticker', 'dates']).mean()
df

df = df.reset_index()
df

df_AMZN = df[df['ticker'] == 'JMIA']
  df_AMZN.columns = ['index','ticker', 'Date', 'compound']

  
 
  df_AMZN

fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
ax.bar(mean_df['JMIA'], mean_df['BABA'])

def enable_plotly_in_cell():
  import IPython
  from plotly.offline import init_notebook_mode
  display(IPython.core.display.HTML('''<script src="/static/components/requirejs/require.js"></script>'''))
  init_notebook_mode(connected=False)

start = datetime.datetime(2019,1,1)
end = datetime.datetime(2021,5,5)

Amazon = web.DataReader('AMZN', 'yahoo', start, end)

Amazon

Jumia = web.DataReader('JMIA', 'yahoo', start, end)

Jumia

Alibaba = web.DataReader('BABA', 'yahoo', start, end)


Alibaba

plt.figure(figsize=(8,5))
Jumia['Adj Close'].plot(label = 'Jumia Price')
plt.title("l'évolution du prix de l'action Jumia")

plt.figure(figsize=(8,5))

Alibaba['Adj Close'].plot(label = 'Alibaba Price')
plt.title("l'évolution du prix de l'action Alibaba")

plt.figure(figsize=(8,5))

Amazon['Adj Close'].plot()
plt.title("l'évolution du prix de l'action Amazon")

amazon = Amazon['Volume'].plot(label = 'Amazon Volume').figsize=(15,10)
alibaba = Alibaba['Volume'].plot(label = 'Alibaba Volume').figsize=(15,10)
jumia = Jumia['Volume'].plot(label = 'Jumia Volume').figsize=(15,10)
plt.legend()
plt.title("volumes des transactions sur le marché boursier")

Amazon['CapValue'] = Amazon['Adj Close']*Amazon['Volume']

Amazon

Alibaba['CapValue'] = Alibaba['Adj Close'] * Alibaba['Volume']
Alibaba

Jumia['CapValue'] = Jumia['Adj Close'] * Jumia['Volume']
Jumia

amazon = Amazon['CapValue'].plot(label = 'Amazon CapValue').figsize=(20,20)
alibaba = Alibaba['CapValue'].plot(label = 'Alibaba CapValue').figsize=(20,20)
jumia = Jumia['CapValue'].plot(label = 'Jumia CapValue').figsize=(20,20)
plt.legend()

Alibaba['CapValue'].argmax()

Alibaba.iloc[[Alibaba['CapValue'].argmax()]]

Ecom_comp = pd.concat([Amazon['Adj Close'], Alibaba['Adj Close'], Jumia['Adj Close']], axis= 1)
Ecom_comp.columns = ['Amazon Adj close', 'Alibaba Adj close', 'Jumia Adj Close']
Ecom_comp

scatter_matrix(Ecom_comp, figsize= (10,8))

Amazon['Returns']= (Amazon['Adj Close']/ Amazon['Adj Close'].shift(1))-1
Amazon

Alibaba['Returns']= (Alibaba['Adj Close']/ Alibaba['Adj Close'].shift(1))-1
Alibaba

Jumia['Returns']= (Jumia['Adj Close']/ Jumia['Adj Close'].shift(1))-1
Jumia

Amazon['Returns'].hist(bins=50)

Amazon['Returns'].hist(bins=100, label= 'Amazon', alpha = 0, figsize = (13,6))
Alibaba['Returns'].hist(bins=100, label= 'Alibaba', alpha = 0.5, figsize = (13,6))
Jumia['Returns'].hist(bins=100, label= 'Jumia', alpha = 0.5, figsize = (13,6))
plt.legend()

Amazon['Returns'].plot(kind = 'kde', label='Amazon', figsize= (8,6))
Alibaba['Returns'].plot(kind = 'kde', label='Alibaba', figsize= (8,6))
Jumia['Returns'].plot(kind = 'kde', label='Jumia', figsize= (8,6))
plt.legend()
plt.title("Volatilité de l'action")

box_df = pd.concat([Amazon['Returns'], Alibaba['Returns'], Jumia['Returns']], axis = 1)
box_df.columns = ['Amazon', 'Alibaba', 'Jumia']
box_df.plot(kind='box', figsize = (8,6))
plt.title("l'elasticité des prix de l'action")

scatter_matrix(box_df, figsize = (8,8), hist_kwds= {'bins':50}, alpha= 0.15)

Amazon['Cumulative_Return']= (1+ Amazon['Returns']).cumprod()
Alibaba['Cumulative_Return']= (1+ Alibaba['Returns']).cumprod()
Jumia['Cumulative_Return']= (1+ Jumia['Returns']).cumprod()

Amazon['Cumulative_Return'].plot(label= 'Amazon', figsize= (8,7))
Alibaba['Cumulative_Return'].plot(label= 'Alibaba', figsize= (8,7))
Jumia['Cumulative_Return'].plot(label= 'Jumia', figsize= (8,7))
plt.legend()
plt.title("Retour sur investissement ")

Johnson = web.DataReader('JNJ', 'yahoo', start, end)
Johnson

Pfizer = web.DataReader('PFE', 'yahoo', start, end)
Pfizer

PG = web.DataReader('PG', 'yahoo', start, end)
PG

Johnson['Adj Close'].plot(label= 'Johnson', figsize = (8,6))
Pfizer['Adj Close'].plot(label= 'Pfizer', figsize = (8,6))
PG['Adj Close'].plot(label= 'PG', figsize = (8,6))
plt.legend()
plt.title("Prix des actions")

Johnson['Volume'].plot(label= 'Johnson', figsize = (10,8))
Pfizer['Volume'].plot(label= 'Pfizer', figsize = (10,8))
PG['Volume'].plot(label= 'PG', figsize = (10,8))
plt.legend()
plt.title("Volume des action sur le marché boursier")

Johnson['Capvalue'] = Johnson['Adj Close'] * Johnson['Volume']
Pfizer['Capvalue'] = Pfizer['Adj Close'] * Pfizer['Volume']
PG['Capvalue'] = PG['Adj Close'] * PG['Volume']

Johnson['Capvalue'].plot(label = 'Johnson', figsize = (15,8))
Pfizer['Capvalue'].plot(label = 'Pfizer', figsize = (15,8))
PG['Capvalue'].plot(label = 'PG', figsize = (15,8))
plt.legend()
plt.title("Valeur du capital")

Pfizer['Capvalue'].argmax()

Pfizer.iloc[[Pfizer['Capvalue'].argmax()]]

Pharma_comp = pd.concat([Johnson['Capvalue'], Pfizer['Capvalue'], PG['Capvalue']], axis= 1)
Pharma_comp.columns = ['Johnson Adj close', 'Pfizer Adj close', 'PG Adj Close']
Pharma_comp

scatter_matrix(Pharma_comp, figsize=(10,8))

Johnson['Returns']= (Johnson['Adj Close']/ Johnson['Adj Close'].shift(1))-1
Pfizer['Returns']= (Pfizer['Adj Close']/ Pfizer['Adj Close'].shift(1))-1
PG['Returns']= (PG['Adj Close']/ PG['Adj Close'].shift(1))-1

Johnson['Returns'].hist(bins = 100, label = 'Johnson', figsize = (8,6), alpha = 0.5)
Pfizer['Returns'].hist(bins = 100, label = 'Pfizer', figsize = (8,6), alpha = 0.5)
PG['Returns'].hist(bins = 100, label = 'PG', figsize = (8,6), alpha = 0.5)
plt.legend()

Johnson['Returns'].plot(kind = 'kde', label='Johnson', figsize= (8,6))
Pfizer['Returns'].plot(kind = 'kde', label='Pfizer', figsize= (8,6))
PG['Returns'].plot(kind = 'kde', label='PG', figsize= (8,6))
plt.legend()

Box_rev = pd.concat([Johnson['Returns'], Pfizer['Returns'], PG['Returns']], axis= 1)
Box_rev.columns = ['Johnson Returns', 'Pfizer Returns', 'PG Returns']
Box_rev

Box_rev.plot(kind='box', figsize = (8,6))

scatter_matrix(Box_rev, figsize=(10,8), alpha = 0.2)

Johnson['Cumulative_Returns']= (1+ Johnson['Returns']).cumprod()
Pfizer['Cumulative_Return']= (1+ Pfizer['Returns']).cumprod()
PG['Cumulative_Return']= (1+ PG['Returns']).cumprod()

Johnson['Cumulative_Returns'].plot(label = 'Johnson', figsize = (8,8))
Pfizer['Cumulative_Return'].plot(label = 'Pfizer', figsize = (8,8))
PG['Cumulative_Return'].plot(label = 'PG', figsize = (8,8))
plt.legend()

Amazon_model = pd.concat([Amazon['CapValue'], Amazon['Returns'], Amazon['Cumulative_Return'], Amazon['Adj Close']], axis=1)
Amazon_model
Alibaba_model = pd.concat([Alibaba['CapValue'], Alibaba['Returns'], Alibaba['Cumulative_Return'], Alibaba['Adj Close']], axis=1)
Jumia_model = pd.concat([Jumia['CapValue'], Jumia['Returns'], Jumia['Cumulative_Return'], Jumia['Adj Close']], axis=1)
Amazon_model = Amazon_model.fillna(0)
Amazon_model = Amazon_model.replace([np.inf, -np.inf], np.nan)
Jumia_model.replace([np.inf, -np.inf], np.nan, inplace=True)
Jumia_model = Amazon_model.fillna(0)


Amazon_model

Johnson_model = pd.concat([Johnson['Capvalue'], Johnson['Returns'], Johnson['Cumulative_Returns'], Johnson['Adj Close']], axis=1)
Pfizer_model = pd.concat([Pfizer['Capvalue'], Pfizer['Returns'], Pfizer['Cumulative_Return'], Pfizer['Adj Close']], axis=1)
PG_model = pd.concat([PG['Capvalue'], PG['Returns'], PG['Cumulative_Return'], PG['Adj Close']], axis=1)

x = Jumia_model.drop(['Adj Close'], axis = 1).values
y =  Jumia_model['Adj Close'].values

x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.25, random_state = 0)



ml = LinearRegression()
ml.fit(x_train, y_train)

y_pred = ml.predict(x_test)

plt.figure(figsize=(15,10))
plt.scatter(y_test,y_pred)
plt.xlabel('actual')
plt.ylabel('prediction')
plt.title('Actual vs predict')